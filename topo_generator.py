import re
import os
from os.path import join
import pandas as pd
import openpyxl as px
from jinja2 import Template, Environment, FileSystemLoader


def GetLinks(root, filenames):
    links = []
    checked_nodes = [root]
    nodes = [root]
    types = {}
    models = {}
    # 迴圈持續抓取符合row index的xlsx
    while True:
        next_nodes = []
        for node in nodes:
            node_pd = pd.read_excel('output/sheet/' + node + '.xlsx', sheet_name='cdp', index_col=0)
            columns = node_pd.columns.values
            # for迴圈抓取所有的cell
            for i, j in node_pd.iterrows():
                col = 0
                for cell in j:
                    # 判斷cell不等於nan
                    if cell == cell:
                        i_search = re.match(r'(.+).* \[(.+)\]', i)
                        name = i_search.group(1).split('.')[0]
                        model, type = i_search.group(2).split(', ')
                        # 由row index預留的cdp nei內容簡易判斷設備類別
                        if 'S' in type:
                            if 'R' in type:
                                types[name] = 'l3_sw'
                            else:
                                types[name] = 'l2_sw'
                        elif 'R' in type:
                            types[name] = 'router'
                        models[name] = model
                        if name not in checked_nodes:
                            if name + '.xlsx' in filenames:
                                next_nodes.append(name)
                                checked_nodes.append(name)
                            else:
                                checked_nodes.append(name)
                        link = {
                            's': checked_nodes.index(node),
                            't': checked_nodes.index(name),
                            's_port': columns[col],
                            't_port': cell
                        }
                        links.append(link)
                    col += 1
        next_nodes = list(set(next_nodes))

        if len(next_nodes):
            nodes = next_nodes.copy()
        else:
            break
    return (checked_nodes, links, types, models)


def XlsxToHtml(filename, file_list):
    root = re.match(r'.+[\\/]+.+[\\/]+(.+)\..+', filename).group(1)
    nodes, links, types, models = GetLinks(root, file_list)
    data = {'nodes': nodes, 'links': links, 'types': types, 'models': models}

    try:
        env = Environment(loader=FileSystemLoader('.'))
        template = env.get_template('template.html')
        graph = template.render(data)
        os.makedirs('output/graph', exist_ok=True)
        outputname = 'output/graph/' + root + '.html'
        f = open(outputname, 'w')
        print(graph, file=f)
        print('%s is generated by %s' % (outputname, filename))
    except:
        raise
        pass


def Logging(message):
    log = open('log.txt', 'a')
    print(message, file=log)


def GetPO(hostname, interfaces, config, filename):
    conf_search = re.search(r'\n%s[>|#].+(\nBuilding configuration\.\.\.\n)' % hostname, config)
    if conf_search:
        conf_all = config[config.index(conf_search.group(1)):]
        conf_all = conf_all[:conf_all.index('#')]
        interfaces_conf = re.findall(r'\!\n(interface[^\!]+)', conf_all)
        int_po_list = []
        for interface in interfaces_conf:
            po = re.match(r'^interface (.+)\n[^\!]+\n channel-group (\d+) mode (\w+)', interface)
            if po:
                int_po_list.append([po.group(1), 'Po' + po.group(2), po.group(3)])
        # 建立port channel用的df
        po_df = pd.DataFrame(columns=[x[0] for x in interfaces], index=[x[1] for x in int_po_list])
        for po_int in int_po_list:
            int_pattern = GetInterfacePattern(po_int[0])
            for interface in interfaces:
                int_name = re.match(int_pattern, interface[0])
                if int_name:
                    try:
                        po_df._set_value(po_int[1], int_name.group(0), po_int[2])
                    except:
                        pass
                    break
        with pd.ExcelWriter(filename, mode='a') as writer:
            po_df.to_excel(writer, sheet_name='po')
    else:
        Logging('[%s] Not found \"sh run\"' % hostname)


def GetVLAN(hostname, interfaces, config, filename):
    # 以sh vlan抓取vlan及access port
    vlan_search = re.search(r'\n%s[>|#]sh.+vl.+\n' % hostname, config)
    if vlan_search:
        vlan_command = vlan_search.group(0)
        vlan_all = config[config.index(vlan_command):]
        vlan_footer = re.search(r'VLAN +Type +SAID +MTU +Parent +RingNo +BridgeNo +Stp +BrdgMode +Trans1 +Trans2+\n', \
                vlan_all).group(0)
        vlan_all = vlan_all[:vlan_all.index(vlan_footer)]
        vlan_id_list = re.findall(r'(\n\d+) ', vlan_all)
        vlan_list = []
        for i in range(len(vlan_id_list)):
            if i == len(vlan_id_list) - 1:
                v = vlan_all[vlan_all.index(vlan_id_list[i]):].replace('\n', '')
            else:
                v = vlan_all[vlan_all.index(vlan_id_list[i]):vlan_all.index(vlan_id_list[i + 1])].replace('\n', '')
            v_status = re.match(r'(\d+) +(\S+) +(\S+) +', v)
            v_port = re.findall(r'(\S+\d)', v.replace(v_status.group(0), ''))
            vlan_list.append((v_status.group(1), v_port))
        # 建立處理vlan的DataFrame
        vlan_df = pd.DataFrame(columns=[x[0] for x in interfaces], index=[x[0] for x in vlan_list])

        for vlan in vlan_list:
            for vlan_int in vlan[1]:
                int_pattern = GetInterfacePattern(vlan_int)
                for interface in interfaces:
                    int_name = re.match(int_pattern, interface[0])
                    if int_name:
                        try:
                            vlan_df._set_value(vlan[0], int_name.group(0), 'access')
                        except:
                            pass
                        break
    else:
        Logging('[%s] Not found \"sh vlan\"' % hostname)
        return

    # 以sh int trunk抓取trunk
    trunk_search = re.search(r'\n%s[>|#]sh.+int.+tr.+\n' % hostname, config)
    if trunk_search:
        trunk_command = trunk_search.group(0)
        trunk_all = config[config.index(trunk_command):]
        trunk_head = re.search(r'Vlans allowed on trunk', trunk_all).group(0)
        trunk_all = trunk_all[trunk_all.index(trunk_head):]
        trunk_all = trunk_all[:trunk_all.index('\n\n')]
        trunk_list = re.findall(r'\n(\S+) +(.+)', trunk_all)

        for trunk in trunk_list:
            vlan_list = trunk[1].split(',')
            int_pattern = GetInterfacePattern(trunk[0])
            for interface in interfaces:
                int_name = re.match(int_pattern, interface[0])
                if int_name:
                    try:
                        for vlan in vlan_list:
                            if '-' in vlan:
                                v = vlan.split('-')
                                for i in range(int(v[0]), int(v[1]) + 1):
                                    vlan_df._set_value(v, int_name.group(0), 'trunk')
                            else:
                                vlan_df._set_value(vlan, int_name.group(0), 'trunk')
                    except:
                        pass
    else:
        Logging('[%s] Not found \"sh int trunk\"' % hostname)

    with pd.ExcelWriter(filename, mode='a') as writer:
        vlan_df.to_excel(writer, sheet_name='vlan')


def GetCDP(hostname, interfaces, config, filename):
    # 由sh cdp nei抓取
    cdp_command_list = [x for x in re.findall(r'\n%s[>|#]sh.+cdp.+n.+\n' % hostname, config) if ' d' not in x]
    if len(cdp_command_list):
        cdp_header_pattern = r'Device ID +Local Intrfce +Holdtme +Capability +Platform +Port ID\n'
        nei_all = config[config.index(cdp_command_list[0]):]
        nei_all = nei_all[nei_all.index(re.search(cdp_header_pattern, nei_all).group(0)):]
        if 'Total cdp entries displayed' in nei_all:
            nei_all = nei_all[:nei_all.index('Total cdp entries displayed')]
        else:
            nei_all = nei_all[:nei_all.index(hostname)]
        # 抓取中間無換行的neighbor
        nei_list_1_row = re.findall(r'\n(\S+) +([a-zA-Z]+ [\d/]+) +(\d+) +([A-Z ]+) +(\S+) +([a-zA-Z]+ [\d/]+)',
                              nei_all)
        # 抓取中間有一次換行的neighbor
        nei_list_2_row = re.findall(r'\n(\S+)\n +([a-zA-Z]+ [\d/]+) +(\d+) +([A-Z ]+) +(\S+) +([a-zA-Z]+ [\d/]+)',
                              nei_all)
        nei_list = nei_list_1_row + nei_list_2_row
        # 建立cdp nei用之DataFeame
        cdp_df = pd.DataFrame(columns=[x[0] for x in interfaces], index=set([x[0] + ' [%s, %s]' % (x[4], x[3]) for x in nei_list]))

        for nei in nei_list:
            int_pattern = GetInterfacePattern(nei[1])
            for interface in interfaces:
                int_name = re.match(int_pattern, interface[0])
                if int_name:
                    cdp_df._set_value(nei[0] + ' [%s, %s]' % (nei[4], nei[3]), int_name.group(0), nei[5].replace(' ', ''))
                    break
        with pd.ExcelWriter(filename, mode='a') as writer:
            cdp_df.to_excel(writer, sheet_name='cdp')
    else:
        Logging('[%s] Not found \"sh cdp nei\"' % hostname)


def GetInterfacePattern(target):
    interface = re.match(r'^(\D{2}).*(\d+' + r'/\d+' * target.count('/') + ')', target)
    return r'^' + interface.group(1) + '\S*' + interface.group(2) + '$'


def TextToXlsx(f):
    config = open(f, 'r').read()
    # 從檔案內容取得hostname
    hostname = [x for x in set(re.findall(r'\n(.+)[#|>]', config)) if x in f][0]
    # 由sh ip int br取得if列表
    brief_search = \
        re.search(r'\n%s[>|#]sh.+ip.+int.+br.+\nInterface +IP-Address +OK\? +Method Status +Protocol\n(.+)' % hostname, \
                  config)
    # 由sh int des取得if列表
    des_search = \
        re.search(r'\n%s[>|#]sh.+int.+des.+\nI.+S.+P.+D.+\n(.+)' % hostname, config)
    if brief_search:
        brief_head = brief_search.group(1)
        brief = config[config.index(brief_head):]
        brief = brief[:brief.index(hostname)]
        brief = brief.replace('administratively down', 'admin_down')
        interfaces = [[x[0], x[4], x[5]] for x in [x.split() for x in brief.split('\n') if len(x)]]
    elif des_search:
        des_head = des_search.group(1)
        des = config[config.index(des_head):]
        des = des[:des.index('\n' + hostname)]
        des = des.replace('administratively down', 'admin_down')
        interfaces = [[x[0], x[1], x[2]] for x in [x.split() for x in des.split('\n') if len(x)]]

    for i in interfaces:
        i_re = re.match(r'^([a-zA-Z]{2})[a-zA-Z\-]*([\d/]+)', i[0])
        i[0] = i_re.group(1) + i_re.group(2)
    try:
        assert interfaces
        os.makedirs('output/sheet', exist_ok=True)
        filename = 'output/sheet/%s.xlsx' % hostname
        wb = px.Workbook()
        wb.save(filename)
        GetVLAN(hostname, interfaces, config, filename)
        GetCDP(hostname, interfaces, config, filename)
        GetPO(hostname, interfaces, config, filename)
        wb = px.load_workbook(filename)
        wb.remove_sheet(wb.get_sheet_by_name('Sheet'))
        wb.save(filename)
        print('\"%s\" convert to \"%s\" success!!' % (f, filename))
    except:
        raise
        print('\"%s\" convert to \"%s\" fail!!' % (f, filename))
        Logging('[%s] failed!!!!!"' % f)


def ConvertToXlsx():
    file_list = []
    for root, dirs, files in os.walk('./config'):
        for f in files:
            file_list.append(join(root, f))
    for f in file_list:
        TextToXlsx(f)


def ConvertToHtml():
    file_list = []
    filename_list = []
    for root, dirs, files in os.walk('./output/sheet'):
        for f in files:
            file_list.append(join(root, f))
            filename_list.append(f)
    for f in file_list:
        XlsxToHtml(f, filename_list)


if __name__ == '__main__':
    ConvertToXlsx()
    ConvertToHtml()













